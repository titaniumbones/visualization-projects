* [[https://gionkunz.github.io/chartist-js/examples.html][Chartist]] 2: using CSV data from the NOAA/GLOS point database

** Intro
Proof-of-concept graph of data from NOAA's temporarily-out-of-service point forecast API

Some basic thoughts:

- graphing wateroffice data turns out to be easy once it's available: convert unix date-time to javascript Date object & graph. Improvements might include:
- use either `target-line` or maybe better, [[https://github.com/gionkunz/chartist-plugin-threshold][threshold]] plugin to identify periods of navigability.  cf. descriptions and examples on [[https://gionkunz.github.io/chartist-js/plugins.html][plugins page]].
  - threshold CSS and definition is working pretty well as of <2019-11-27 Wed> in the page generated below
- [[https://github.com/tmmdata/chartist-plugin-tooltip][tooltips plugin]] is a little less awesome than other frameworks:
  - no touch support!!
  - tooltips only show up on mouseover of *points*, not of areas.  This will be a real pain in these graphs.
  - not trivial to pass HTML to the tooltip, though it can be overcome by passing a function name [[https://github.com/tmmdata/chartist-plugin-tooltip#available-options-and-their-defaults][to the tooltipFnc options property]] on plugin initialization. The function takes towo parameters: *meta*, the value of the meta property, and *value*, the y-value. This turns out to be pretty inflexible, and probably rules out chartist for our purposes (sad b/c it was so easy to work with).
  - [[https://github.com/tmmdata/chartist-plugin-tooltip/pulls][lotso f outstanding PR's]] and [[https://github.com/tmmdata/chartist-plugin-tooltip/issues][issues]], doesn't appear to be very actively maintained.
- *thresholds/line segments*: If I really want to  use color to represent direction, then instead of threshold I have to use some kind of custom plugin -- I can write it! -- that deserializes meta and takes a value map on the  ~quality~~ property, then uses that to do the smae thing asthreshold (clone element & mask). I can't quite understand the threshold code, so would have to investigate further, but looks possible.  Note that all this work is done in the *on: draw* phase of chart construction, cf. https://gionkunz.github.io/chartist-js/getting-started.html#colour-up-your-charts, dynamic coloring
** CSS

#+begin_src css :tangle chartist-line-noaa.css
:root {
   --bad-value: #f05b4f;
   --good-value: #59922b;
   --shoulder-value: yellow;
   --too-small: grey;
}
/* Use this selector to override the line style on a given series */
.ct-series-a .ct-line {
  /* Set the colour of this series line */
  stroke:blue;
  /* Control the thikness of your lines */
  stroke-width: 5px;
  /* Create a dashed line with a pattern */
  // stroke-dasharray: 4px 8px;
}

/* This selector overrides the points style on line charts. Points on line charts are actually just very short strokes. This allows you to customize even the point size in CSS */
.ct-series-a .ct-point {
  /* Colour of your points */
  stroke:red;
  /* Size of your points */
  stroke-width: 10px;
  /* Make your points appear as squares */
  /* stroke-linecap: square; */
}
 .ct-target-line {
    stroke: var(no-surf);
    stroke-width: 2px;
    stroke-dasharray: 4px;
    shape-rendering: crispEdges;
}

 /* threshold */
 .ct-line.ct-threshold-above, .ct-point.ct-threshold-above, .ct-bar.ct-threshold-above {
     stroke: var(--good-value);
 }

 .ct-line.ct-threshold-below, .ct-point.ct-threshold-below, .ct-bar.ct-threshold-below {
     stroke: var(--too-small);
 }

 .ct-area.ct-threshold-above {
     fill: var(--good-value);
 }

 .ct-area.ct-threshold-below {     
     fill: var(--too-small);
 }

 /* arrows */
.chartist-tooltip div.container {
   padding: 10px;
   opacity:0.8;
}
.chartist-tooltip .bad {
   background-color: var(--bad-value);
}
.chartist-tooltip .good {
   background-color: var(--good-value);
}

.chartist-tooltip .shoulder {
   background-color: var(--shoulder-value);
}

.chartist-tooltip {
background-color: unset }

.arrow {
transform:rotate(calc(var(--direction)*1deg));
display:inline-block;
}

.no-surf {
stroke: var(--no-surf);
fill: var(--no-surf);
opacity: 0.2;
pointer-events: none;
}
/* background */


#+end_src
** HTML
#+begin_src html :tangle chartist-line-noaa.html
<!doctype html>
<html>
    <head>
        <meta charset="UTF-8"/>
        <title>My first Chartist Tests</title>
        <link rel="stylesheet"
              href="bower_components/chartist/dist/chartist.min.css">
        <link rel="stylesheet"
              href="bower_components/chartist-plugin-tooltip/dist/chartist-plugin-tooltip.css">
        <link rel="stylesheet"
           href="bower_components/chartist-plugin-threshold/dist/chartist-plugin-threshold.css">
        <link rel="stylesheet"
              href="chartist-line-noaa.css">
        <style>
          main#main {
          margin-top: 150px;
          display: flex;
          max-height: 400px;
          grid-column-template: 1fr 1fr 1fr;
          justify-content: space-around
          }
        </style>
  </head>
  <body>
    <!-- Site content goes here !-->
    <main id="main">
      <div class="filler"></div>
      <div class="ct-chart ct-perfect-fourth"></div>
      <div class="filler"></div>
    </main>
    <!-- <script src="wateroffice.js"></script> -->
    <script src="js/noaaParser.js"></script>
    <script src="bower_components/chartist/dist/chartist.js"></script>
    <script src="bower_components/chartist-plugin-tooltip/dist/chartist-plugin-tooltip.js"></script>
    <script src="bower_components/chartist-plugin-threshold/dist/chartist-plugin-threshold.js"></script>
    <script src="node_modules/moment/min/moment-with-locales.min.js"></script>
    <script src="chartist-line-noaa.js"></script>
  </body>
</html>

#+end_src

** JS

#+begin_src js :tangle chartist-line-noaa.js
const thisSpot = abay
function generateTooltip (meta, value) {
  //console.log(meta);
  let thisVar = 'hello';
  let info = Chartist.deserialize(meta);
  let p = Chartist.deserialize(meta);
  console.log (p.quality, p.direction, p.wvd);
  let valArray = value.split(','),
      date = moment(Number(valArray[0])),
      magnitude = valArray[1];
  let arrow =`<span class="arrow" style="--direction:${Math.trunc(p.wvd)};">&darr;</span> `,
      dateSpan = `<span class="chartist-tooltip-value">${date.format('MM-D HH:mm')}</span>`,
      magSpan = `<span>${magnitude}m; coming from: ${Math.trunc((p.wvd+180) % 360)}&deg;</span>`,
      text = `<span class="chartist-tooltip-value>${date.format('MM-DD - HH:mm')}<br>${magnitude}</span>`,
      output = `<div class="${p.quality} container">${arrow}<br>${magSpan}<br>${dateSpan}'</div>`
  return output
}

async function buildChart (spot) {
  const rawData = await getJSON('data/pqt-out.csv', 2),
        processed = processNOAAData(rawData, "wvh");
  //console.log("ubilding chart");
  //console.log(processed);
  chart = new Chartist.Line('.ct-chart', {
    series: [
      {name: 'actual-data',
       data: processed
      }
    ]
  }, {
    showArea: true,
    axisX: {
      type: Chartist.FixedScaleAxis,
      divisor: 30,
      labelInterpolationFnc: function(value) {
        return moment(value).format('MM-DD [\n] HH') + ':00';
      }
    },
    targetLine: {
      value: spot.minHeight,
      class: 'ct-target-line'
    },
    plugins: [
      Chartist.plugins.tooltip({
        tooltipFnc: generateTooltip, 
        anchorToPoint: true,
        //metaIsHTML: true
      }),
      Chartist.plugins.ctThreshold({threshold:spot.minHeight})
    ]
    
  });

  chart.on('created', function (context) {
    console.log(context);
    let targetLineY = projectY(context.chartRect, context.bounds, context.options.targetLine.value);
    
    
    context.svg.elem('rect', {
      x: context.chartRect.x1,
      width: context.chartRect.x2 - context.chartRect.x1,
      y: targetLineY,
      height:  context.chartRect.y1 - targetLineY
    }, "no-surf" );

    context.svg.elem('line', {
      x1: context.chartRect.x1,
      x2: context.chartRect.x2,
      y1: targetLineY,
      y2: targetLineY
    }, context.options.targetLine.class);
  });

  //  chart.on('draw', function(data) {
  //    if(data.type === 'line' || data.type === 'area') {
  //      data.element.animate({
  //        d: {
  //           begin: 1000 * data.index,
  //           dur: 1000,
  //           from: data.path.clone().scale(1, 0).translate(0, data.chartRect.height()).stringify(),
  //            to: data.path.clone().stringify(),
  //             easing: Chartist.Svg.Easing.easeOutQuint
          
  //       });
  //     }
  //  });  
  // // This is the bit we are actually interested in. By registering a callback for `draw` events, we can actually intercept the drawing process of each element on the chart.
  // chart.on('draw', function(context) {
  //   console.log(context.type)
  //   // First we want to make sure that only do something when the draw event is for bars. Draw events do get fired for labels and grids too.
  //   if(context.type === 'line' || context.type === 'path' || context.type === 'point') {
  //     console.log(context);
  //     // With the Chartist.Svg API we can easily set an attribute on our bar that just got drawn
  //     context.element.attr({
  //       // Now we set the style attribute on our bar to override the default color of the bar. By using a HSL colour we can easily set the hue of the colour dynamically while keeping the same saturation and lightness. From the context we can also get the current value of the bar. We use that value to calculate a hue between 0 and 100 degree. This will make our bars appear green when close to the maximum and red when close to zero.
  //       style: 'stroke: hsl(' + Math.floor(Chartist.getMultiValue(context.value) / 1.375 * 100) + ', 50%, 50%);'
  //     });
  //   }
  //});

}

function projectY(chartRect, bounds, value) {
  return chartRect.y1 - (chartRect.height() / bounds.max * value)
}

let chart;
buildChart(abay);
#+end_src

#+RESULTS:

