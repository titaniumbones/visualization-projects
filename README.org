* Experiments with curl and  vis libraries
** Restclient: get some data going
#+NAME: wateroffice
#+begin_src restclient :results file :exports results :file-ext json
:params = station=02HB029&start_date=2019-11-14&end_date=2019-11-22&param1=46&param2=47
#
GET https://wateroffice.ec.gc.ca/services/real_time_graph/json/inline?station=02HB029&start_date=2019-11-14&end_date=2019-11-22&param1=46&param2=47

#+end_src

#+RESULTS: wateroffice
[[file:wateroffice.json]]

** [[https://www.chartjs.org/][Chart.js]]
*** concerns
Was somewhat daunting when I started but no longer looks all that hard:

- in dataset, can use ~{x: date, y: value}~ array elements instead of scalars (the default in most examples)
- *thresholds*
  - [[https://stackoverflow.com/questions/42691873/draw-horizontal-line-on-chart-in-chart-js-on-v2][explanation of using chart.js annotation library]] to simulate the threhold/line funcitonality already working in chartist code below
  - [[https://stackoverflow.com/questions/36916867/chart-js-line-different-fill-color-for-negative-point][much cooler & more powerful explanation of how you would modify the line chart type]] to change the fill gradients, by passing a threshold value.  The example uses just ~0~ but looksl ike it could really be anything. [[http://jsfiddle.net/g2r2q5Lu/][cf. jsFiddle]].
  - another alternative is the cool-looking [[https://github.com/bbc/chart.bands.js][chart pands plugin]](not under active development), which can adjust line type etc according to y-value.  [[https://codepen.io/Tarqwyn/pen/QNzNVg][cf. codepen]].
  - also look at new [[https://github.com/chartjs/Chart.js/blob/master/samples/advanced/line-gradient.html][line-gradient plugin]].
  - [[https://stackoverflow.com/questions/35249498/how-to-change-line-segment-color-of-a-line-graph-in-chart-js][low-level code to redraw line segments]]; may not be trivial w/ dynamically-generated data sets. Would have to do the math first.  [[https://jsfiddle.net/egamegadrive16/zjdwr4fh/][jsFiddle]].
  - [[https://stackoverflow.com/questions/52120036/chartjs-line-color-between-two-points][more manual intervention from stackoverflow]] -- still looks messy!
- *tooltips*
  - [[https://www.chartjs.org/samples/latest/scales/time/financial.html][this example has pretty good UI for tooltip]] -- uses ~intersect: false, mode:index~ and a callback to make the tooltips.
  - [[https://www.chartjs.org/docs/latest/configuration/tooltip.html][tooltip docs are pretty extensive and interesting]].
  - [[https://stackoverflow.com/questions/45159895/moving-vertical-line-when-hovering-over-the-chart-using-chart-js][cool example of how to extend line chart type to include a line that appearso n the graph on hover]] -- helps to show you where you are.  Note the comments about the issue with which tooltip gets activated -- need to set options.tooltips.axis to ~x~ on initializaiton of the chart. [[https://stackoverflow.com/questions/54990176/chart-js-vertical-line-when-hovering-and-shadow-on-line/55045517#55045517][another very similar question and cool implementation]]. 
- *time axes*
  - [[https://www.chartjs.org/samples/latest/scales/time/combo.html][timexcales using moment]]
*** code 
We'll use the file [[./chart-js.html]] for code
#+begin_src css :tangle chart-js.css
main: {display:flex; flex-direction:row; height: 75vh; width:100vh;justify-content:space-around;}
section.chart-container { flex-basis:1fr;}
canvas#myChart {max-width:100vw; max-height:80vh}
#+end_src
#+begin_src web :tangle chart-js.html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8"/>
    <title>Chart.js Data visualization</title>
    <link href="chart-js.css" rel="stylesheet"/>
    <script src="node_modules/chart.js/dist/Chart.bundle.js"></script>
    <script src="js/noaaParser.js"></script>
  </head>
  <body>
    
    <main><section class="chart-container">
        <canvas id="myChart"></canvas>
    </section></main>
<script>
</script>
    <script src="chartjs-lines.js"></script>

  </body>
</html>

#+end_src
#+begin_src js :tangle chartjs-lines.js
const ctx = document.getElementById('myChart').getContext('2d');
const timeFormat = 'MM/DD - HH:mm';
let myChart;
async function loadMe () {
let dataArray = await getJSON('data/pqt-out.csv', 2)
    .then( (json) => {
      // console.log(json);
      // console.log(processNOAAData(json, "wsp"));
      return processNOAAData(json);
     });
//console.log(j);
const thisSpot = abay;
 myChart = new Chart(ctx, {
    type: 'line',
    data: {
        datasets: [{
            label: 'Wave Height in Meters',
            data: dataArray, 
            backgroundColor: 'red',
	    borderColor: 'red',
          fill: false, //true,
            borderWidth: 1
        }]
    },
     options: {
         scales: {
	   xAxes: [{
	     type: 'time',
	     display: true,
	     time: {
	       format: timeFormat,
	       //round: 'hour'
	     }
	   }],
         },
       tooltips: {
         backgroundColor: `rgba(0,0,0,0.5)`,
	 intersect: false,
	 mode: 'index',
	 callbacks: {
           //title: (item, data) => "I am a title",
	   label: function(tooltipItem, myData) {
             console.log("creating label");
             console.log(tooltipItem);
             let d = myData.datasets,
                 i = tooltipItem.datasetIndex,
                 dir = d[i].data[tooltipItem.index].direction ? `direction: <span class="arrow" style="${d[i].direction}">&darr;</span>` : ''; 
                 arrow = ``;
       console.log(d[i].data[tooltipItem.index]);
	     var label = myData.datasets[tooltipItem.datasetIndex].label || '';
	     if (label) {
	       label += ': ';
	     }
	     label += parseFloat(tooltipItem.value).toFixed(2);
             label += dir;
             console.log(label);
	     return label;
	   }
	 }
       }
     }
 });
}
loadMe();
#+end_src

see [[https://www.chartjs.org/docs/latest/getting-started/usage.html][getting started guide]] and [[https://www.chartjs.org/docs/latest/getting-started/usage.html][samples page]] for example code.

** [[https://gionkunz.github.io/chartist-js/examples.html][Chartist]] 1: using river gauge data

Some basic thoughts:

- graphing wateroffice data turns out to be easy once it's available: convert unix date-time to javascript Date object & graph. Improvements might include:
- use either `target-line` or maybe better, ~threshold~ plugin to identify periods of navigability.  cf. descriptions and examples on [[https://gionkunz.github.io/chartist-js/plugins.html][plugins page]].
- tooltips plugin is a little less awesome than other frameworks:
  - no touch support!!
  - tooltips only show up on mouseover of *points*, not of areas.  This will be a real pain in these graphs.  


#+begin_src css :tangle chartist-line.css
/* Use this selector to override the line style on a given series */
.ct-series-a .ct-line {
  /* Set the colour of this series line */
  stroke:blue;
  /* Control the thikness of your lines */
  stroke-width: 1px;
  /* Create a dashed line with a pattern */
  // stroke-dasharray: 4px 8px;
}

/* This selector overrides the points style on line charts. Points on line charts are actually just very short strokes. This allows you to customize even the point size in CSS */
.ct-series-a .ct-point {
  /* Colour of your points */
  stroke:red;
  /* Size of your points */
  stroke-width: 3px;
  /* Make your points appear as squares */
  /* stroke-linecap: square; */
}
 .ct-target-line {
    stroke: var(--no-surf);
    stroke-width: 2px;
    stroke-dasharray: 4px;
    shape-rendering: crispEdges;
}
#+end_src

#+begin_src html :tangle chartist-line.html
<!doctype html>
<html>
    <head>
        <meta charset="UTF-8"/>
        <title>My first Chartist Tests</title>
        <link rel="stylesheet"
              href="bower_components/chartist/dist/chartist.min.css">
        <link rel="stylesheet"
              href="chartist-line.css">
        <style>
          main#main {
          display: flex;
          max-height: 400px;
          grid-column-template: 1fr 1fr 1fr;
          justify-content: space-around
          }
        </style>
  </head>
  <body>
    <!-- Site content goes here !-->
    <main id="main">
      <div class="filler"></div>
      <div class="ct-chart ct-perfect-fourth"></div>
      <div class="filler"></div>
    </main>
    <!-- <script src="wateroffice.js"></script> -->
    <script src="bower_components/chartist/dist/chartist.js"></script>
    <script src="node_modules/moment/min/moment-with-locales.min.js"></script>
    <script src="chartist-line.js"></script>
  </body>
</html>

#+end_src
#+begin_src js :tangle chartist-line.js
let woURL = `https://wateroffice.ec.gc.ca/services/real_time_graph/json/inline?`,
    params = `station=02HB029&start_date=2019-11-14&end_date=2019-11-22&param1=46&param2=47`,
    chart;
function gWO (rawData) {
  let processed = rawData["46"].provisional.map( (item) => { return {x: new Date(item[0]), y: item[1]};});
  console.log(processed);
  return processed
}
let proxy = 'https://cors-anywhere.herokuapp.com/';
async function getJSON (url, params ) {
    let target = `${url}${params}`;
    return await fetch(target)
    .then(function(response){console.log(response.json);return response.json();})
    .then(function(json) {
      // console.log(json.parse);
      return json;
    })
    .catch(function(error){console.log(error);});
  }

async function buildChart () {
  let woRaw = await getJSON('wateroffice.json', '')
      .then ( (data ) => data["47"].provisional.map( (item) => {
        let itemObj =  {x: new Date(item[0]), y: item[1]}; return itemObj;}) );
  ;;let wo = woRaw;
  //wo = woRaw["46"].provisional.map( (item) => { return {x: new Date(item[0]), y: item[1]};}); 
  console.log(wo);
  let chart = new Chartist.Line('.ct-chart', {
    series: [
      {name: 'actual-data',
       data: wo
      }
    ]
  }, {
    axisX: {
      type: Chartist.FixedScaleAxis,
      divisor: 5,
      labelInterpolationFnc: function(value) {
        return moment(value).format('dd');
      }
    }
  });
}
buildChart()
#+end_src
** Plot.ly

Lots of cool features but not clear why I would need them:. [[https://plot.ly/javascript/gapminder-example/][one such example]]
** Flot

Jquery=based library. see [[https://www.flotcharts.org/flot/examples/][docs]]. Used by wateroffice for their data.  
** MatricsGraphics

[[https://metricsgraphicsjs.org/][Looks somewhati nteresting. Originally a Mozilla project for website analytics]]. 
** Cubism
[[https://square.github.io/cubism/][also optimized for pullinganalytics from survers]], but with defaults close to what I'm looking for. 
** [[https://c3js.org/][C3.js]]
meta library of D3, much easier to work with, in principle.  
** [[https://canvasjs.com/javascript-charts/json-data-api-ajax-chart/][canvasjs]] -- might be nonfree

