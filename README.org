* Experiments with curl and  vis libraries
** Restclient: get some data going
#+NAME: wateroffice
#+begin_src restclient :results file :exports results :file-ext json
:params = station=02HB029&start_date=2019-11-14&end_date=2019-11-22&param1=46&param2=47
#
GET https://wateroffice.ec.gc.ca/services/real_time_graph/json/inline?station=02HB029&start_date=2019-11-14&end_date=2019-11-22&param1=46&param2=47

#+end_src

#+RESULTS: wateroffice
[[file:wateroffice.json]]

** Chart.js

We'll use the file [[./chart-js.html]] for code

#+begin_src js :tangle chartjs-lines.js
console.log('hello');
// Any of the following formats may be used
const ctx = document.getElementById('myChart');
// var ctx = document.getElementById('myChart').getContext('2d');
// var ctx = $('#myChart');
// var ctx = 'myChart';

#+end_src

see [[https://www.chartjs.org/docs/latest/getting-started/usage.html][getting started guide]] and [[https://www.chartjs.org/docs/latest/getting-started/usage.html][samples page]] for example code.

** [[https://gionkunz.github.io/chartist-js/examples.html][Chartist]]

#+begin_src css :tangle chartist-line.css
/* Use this selector to override the line style on a given series */
.ct-series-a .ct-line {
  /* Set the colour of this series line */
  stroke:blue;
  /* Control the thikness of your lines */
  stroke-width: 1px;
  /* Create a dashed line with a pattern */
  // stroke-dasharray: 4px 8px;
}

/* This selector overrides the points style on line charts. Points on line charts are actually just very short strokes. This allows you to customize even the point size in CSS */
.ct-series-a .ct-point {
  /* Colour of your points */
  stroke:red;
  /* Size of your points */
  stroke-width: 3px;
  /* Make your points appear as squares */
  /* stroke-linecap: square; */
}
#+end_src

#+begin_src html :tangle chartist-line.html
<!doctype html>
<html>
    <head>
        <meta charset="UTF-8"/>
        <title>My first Chartist Tests</title>
        <link rel="stylesheet"
              href="bower_components/chartist/dist/chartist.min.css">
        <link rel="stylesheet"
              href="chartist-line.css">
        <style>
          main#main {
          display: flex;
          max-height: 400px;
          grid-column-template: 1fr 1fr 1fr;
          justify-content: space-around
          }
        </style>
  </head>
  <body>
    <!-- Site content goes here !-->
    <main id="main">
      <div class="filler"></div>
      <div class="ct-chart ct-perfect-fourth"></div>
      <div class="filler"></div>
    </main>
    <!-- <script src="wateroffice.js"></script> -->
    <script src="bower_components/chartist/dist/chartist.js"></script>
    <script src="node_modules/moment/min/moment-with-locales.min.js"></script>
    <script src="chartist-line.js"></script>
  </body>
</html>

#+end_src
#+begin_src js :tangle chartist-line.js
let woURL = `https://wateroffice.ec.gc.ca/services/real_time_graph/json/inline?`,
    params = `station=02HB029&start_date=2019-11-14&end_date=2019-11-22&param1=46&param2=47`
function gWO (rawData) {
  let processed = rawData["46"].provisional.map( (item) => { return {x: new Date(item[0]), y: item[1]};});
  console.log(processed);
  return processed
}
let proxy = 'https://cors-anywhere.herokuapp.com/';
async function getJSON (url, params ) {
    let target = `${url}${params}`;
    return await fetch(target)
    .then(function(response){console.log(response.json);return response.json();})
    .then(function(json) {
      // console.log(json.parse);
      return json;
    })
    .catch(function(error){console.log(error);});
  }

async function buildChart () {
  let woRaw = await getJSON('wateroffice.json', '')
      .then ( (data ) => data["47"].provisional.map( (item) => {
        let itemObj =  {x: new Date(item[0]), y: item[1]}; return itemObj;}) );
  ;;let wo = woRaw;
  //wo = woRaw["46"].provisional.map( (item) => { return {x: new Date(item[0]), y: item[1]};}); 
  console.log(wo);
  let chart = new Chartist.Line('.ct-chart', {
    series: [
      {name: 'actual-data',
       data: wo
      }
    ]
  }, {
    axisX: {
      type: Chartist.FixedScaleAxis,
      divisor: 5,
      labelInterpolationFnc: function(value) {
        return moment(value).format('dd');
      }
    }
  });
}
buildChart()
#+end_src
** Plot.ly

Lots of cool features but not clear why I would need them:. [[https://plot.ly/javascript/gapminder-example/][one such example]]
** Flot

Jquery=based library. see [[https://www.flotcharts.org/flot/examples/][docs]]. Used by wateroffice for their data.  
** MatricsGraphics

[[https://metricsgraphicsjs.org/][Looks somewhati nteresting. Originally a Mozilla project for website analytics]]. 
** Cubism
[[https://square.github.io/cubism/][also optimized for pullinganalytics from survers]], but with defaults close to what I'm looking for. 
** [[https://c3js.org/][C3.js]]
meta library of D3, much easier to work with, in principle.  
** [[https://canvasjs.com/javascript-charts/json-data-api-ajax-chart/][canvasjs]] -- might be nonfree

